options {
	STATIC = false;
	JDK_VERSION = "1.8";
}
PARSER_BEGIN(RouteParser)

package expr;

import java.util.List;
import java.util.ArrayList;

public class RouteParser {
}

PARSER_END(RouteParser)

TOKEN :
{
	< Step: "N" | "E" | "W" | "S" >
}

TOKEN :
{
	< Start: "^" >
|	< End: "$" >		
}

TOKEN :
{
	< LeftParenthesis: "(" >
|	< RightParenthesis: ")" >		
|	< Pipe: "|" >
}


Expr parseExpr() :
{
	Expr route;
}
{
	<Start>
	route = route()
	<End>
	<EOF>
	{
		return route;
	}
}
Expr route() :
{
	final List<Expr> steps = new ArrayList<Expr>();
	Expr step;
}
{
	(
		step = step()
		{
			steps.add(step);
		}
		|
		step = branch()
		{
			steps.add(step);
		}
	)+
	{
		if (steps.size() == 1) {
			return steps.get(0);
		}
		else {
			return new Route(steps);
		}
	}
	
}
Step step() :
{
	Token t;
}
{
	t = <Step>
	{
		return new Step(t.image.charAt(0));
	}
}
Branch branch() :
{
	final List<Expr> options = new ArrayList<Expr>();
	Expr option;
}
{
	<LeftParenthesis>
	option = route()
	{
		options.add(option);
	}
	(
		LOOKAHEAD(<Pipe> route())
		<Pipe>
		option = route()
		{
			options.add(option);
		}
	) *
	(
		<Pipe>
		{
			option = new Stand();
			options.add(option);
		}
	) ?
	<RightParenthesis>
	{
		return new Branch(options);
	}
}